plugins {
    id "com.jfrog.bintray" version '1.8.0'
}

ext {
    getScalaFull = [
        '2.11': '2.11.12',
        '2.12': '2.12.4',
        '2.13': '2.13.0-M3'
    ]

    vScala = System.properties.scalaVersion ?: '2.11'
    vScalaFull = getScalaFull[vScala]
    vBoon = '0.34'
    vServletApi = '3.0.1'
    vMailApi = '1.4.7'
    vMockito = '1.10.19'
    vJUnit = '4.12'
}

tasks.withType(ScalaCompile) {
    def args = System.properties.compilerArgs ?: "-feature -deprecation -explaintypes -unchecked -Xlint"
    scalaCompileOptions.additionalParameters = args.split(" ").toList()
}
tasks.withType(Jar) {
    baseName = "${project.name}_$vScala"
}

if (version == '') {
    version = 'SNAPSHOT'
}
if (version == 'SNAPSHOT') {
    version = tsVersion(version)
}

def tsVersion(version) {
    java.text.SimpleDateFormat tsFmt = new java.text.SimpleDateFormat('yyMMddHHmm')
    tsFmt.setCalendar(Calendar.getInstance(TimeZone.getTimeZone('UTC')))
    return "${version}-b${tsFmt.format(new Date())}"
}

task wrapper(type: Wrapper) {
    gradleVersion = '4.3.1'
}

allprojects {
    repositories {
        mavenCentral()
    }
    apply plugin: 'scala'
    apply plugin: 'maven-publish'
    apply plugin: 'eclipse'
    apply plugin: 'com.jfrog.bintray'

    sourceCompatibility = 1.7
    if (vScala == '2.11') {
        targetCompatibility = 1.7
    } else {
        targetCompatibility = 1.8
    }

    dependencies {

        compileOnly "org.scala-lang:scala-reflect:$vScalaFull"
        compileOnly "javax.servlet:javax.servlet-api:$vServletApi"

        compile "javax.mail:mail:$vMailApi"
        compile "io.fastjson:boon:$vBoon"
        compile "org.glassfish.main.external:jmxremote_optional-repackaged:4.1.2"

        testCompile "org.scala-lang:scala-reflect:$vScalaFull"
        testCompile "junit:junit:$vJUnit"
        testCompile "org.mockito:mockito-all:$vMockito"
        testCompile "javax.servlet:javax.servlet-api:$vServletApi"
    }

    jar {
        manifest {
            attributes "Implementation-Title": project.name, "Implementation-Version": version
        }
    }

    task sourceJar(type: Jar) {
        classifier "sources"
        from project.sourceSets.main.allScala
    }
    task docsJar(type: Jar, dependsOn: scaladoc) {
        classifier "docs"
        from project.scaladoc.destinationDir
    }

    publishing {
        publications {
            maven(MavenPublication) {
                groupId System.properties.mavenGroupId ?: ""
                artifactId "${project.name}_$vScala"

                from components.java
                artifact sourceJar
                artifact docsJar
            }
        }
    }

    bintray {
        user = System.properties.bintrayUser ?: "dryrun"
        key = System.properties.bintrayKey ?: "dryrun"
        dryRun = (user == "dryrun" || key == "dryrun" || version.startsWith('SNAPSHOT'))
        publish = !dryRun
        publications = ['maven']
        pkg {
            userOrg = System.properties.bintrayOrg ?: user
            repo = "maven"
            name = "Scuff"
        }
    }

}
