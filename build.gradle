plugins {
    id 'com.adarshr.test-logger' version '2.1.0' apply true
}

ext {

    getScalaFull = [
        '2.12': '2.12.15',
        '2.13': '2.13.8'
    ]

    vScala = System.properties.scalaVersion ?: '2.13'
    vScalaFull = getScalaFull[vScala]
    vServletApi = '3.0.1'
    vMailApi = '1.6.2'
    vActivation = '1.1.1'
    vMockito = '1.10.19'
    vJUnit = '4.12'
    vBouncyCastle = '1.61'

    ossrhUsername = System.properties.ossrhUsername ?: ""
    ossrhPassword = System.properties.ossrhPassword ?: ""

}

tasks.withType(ScalaCompile) {
    def sharedDefaults = "-feature -deprecation -explaintypes -unchecked -Xlint -language:implicitConversions,higherKinds,reflectiveCalls,existentials"
    def args = System.properties.compilerArgs ?:
        vScala == "2.13"
            ? "$sharedDefaults -Wunused"
            : "$sharedDefaults -Ywarn-unused"
    scalaCompileOptions.additionalParameters = args.split(" ").toList()
}
tasks.withType(Jar) {
    archiveBaseName = "${project.name}_$vScala"
}

wrapper {
    gradleVersion = '6.8.3'
}

allprojects {
    repositories {
        mavenCentral()
    }
    apply plugin: 'scala'
    apply plugin: 'signing'
    apply plugin: 'maven-publish'

    sourceCompatibility = 1.8
    targetCompatibility = 1.8

    sourceSets {
        main {
            scala {
                if (vScala == '2.13') {
                    srcDirs = ['src/main/scala', 'src/2.13/main/scala', 'src/2.12+2.13/main/scala']
                } else if (vScala == '2.12') {
                    srcDirs = ['src/main/scala', 'src/2.12/main/scala', 'src/2.11+2.12/main/scala', 'src/2.12+2.13/main/scala']
                } else throw new IllegalArgumentException("Unsupported Scala version: " + vScala)
            }
        }
    }

    dependencies {
        compile "org.scala-lang.modules:scala-collection-compat_$vScala:2.5.0"

        compileOnly "org.scala-lang:scala-reflect:$vScalaFull"
        compileOnly "javax.servlet:javax.servlet-api:$vServletApi"

        compile "javax.mail:javax.mail-api:$vMailApi"
        compile "javax.activation:activation:$vActivation"
        compile "org.glassfish.main.external:jmxremote_optional-repackaged:4.1.2"

        testCompile "org.scala-lang:scala-reflect:$vScalaFull"
        testCompile "junit:junit:$vJUnit"
        testCompile "org.mockito:mockito-all:$vMockito"
        testCompile "javax.servlet:javax.servlet-api:$vServletApi"

        testCompile "org.bouncycastle:bcprov-ext-jdk15on:$vBouncyCastle"
    }

    jar {
        version = properties.version ?: "0.0.1-SNAPSHOT"
        manifest {
            attributes "Implementation-Title": project.name, "Implementation-Version": version
        }
    }

    task sourceJar(type: Jar) {
        classifier "sources"
        from project.sourceSets.main.allScala
    }
    task docsJar(type: Jar, dependsOn: scaladoc) {
        classifier "docs"
        from project.scaladoc.destinationDir
    }

    publishing {
        repositories {
            maven {
                def releasesRepoUrl = "https://s01.oss.sonatype.org/service/local/staging/deploy/maven2/"
                def snapshotsRepoUrl = "https://s01.oss.sonatype.org/content/repositories/snapshots/"
                url = version.contains('SNAPSHOT') ? snapshotsRepoUrl : releasesRepoUrl
                credentials(PasswordCredentials) {
                    username = System.properties.ossrhUsername ?: ""
                    password = System.properties.ossrhPassword ?: ""
                }
            }
        }
        publications {
            maven(MavenPublication) {
                pom {
                    licenses {
                        license {
                            it.setName('MIT License')
                            it.setUrl('https://github.com/bulletproof-ninja/scuff/blob/master/LICENSE')
                        }
                    }
                    developers {
                        developer {
                            it.setName('Nils Kilden-Pedersen')
                            it.setEmail('nils@bulletproof.ninja')
                            it.setOrganization('Bulletproof Consulting, Inc.')
                            it.setOrganizationUrl('https://github.com/bulletproof-ninja')
                        }
                    }
                    scm {
                        it.setUrl('https://github.com/bulletproof-ninja/scuff.git')
                    }
                }
                groupId "ninja.bulletproof"
                artifactId "${project.name}_$vScala"

                from components.java
                artifact sourceJar
                artifact docsJar

            }
        }
    }

    signing {

        // NOTE: `~/.gradle/gradle.properties` are expected
        // to contain `signingKey` and `signingPassword`

        def signingKey = findProperty("signingKey")
        def signingPassword = findProperty("signingPassword")
        useInMemoryPgpKeys(signingKey, signingPassword)
        sign publishing.publications
    }


    test {
        testLogging {
            exceptionFormat = 'full'
        }
    }

}
